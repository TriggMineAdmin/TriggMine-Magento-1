<?xml version="1.0"?>
<config>
    <modules>
        <Triggmine_IntegrationModule>
            <version>0.1.0</version>
        </Triggmine_IntegrationModule>
    </modules>
    <global>
        <helpers>
            <integrationmodule>
                <class>Triggmine_IntegrationModule_Helper</class>
            </integrationmodule>
        </helpers>
        <blocks>
            <integrationmodule>
                <class>Triggmine_IntegrationModule_Block</class>
            </integrationmodule>
        </blocks>
        <models>
            <integrationmodule>
                <class>Triggmine_IntegrationModule_Model</class>
                <!--<resourceModel>integrationmodule_mysql4</resourceModel>-->
            </integrationmodule>
        </models>
        <events>

            <!-- Support the lib/Triggmine/ folder -->
            <controller_front_init_before>
                <observers>
                    <triggmine_lib_load>
                        <type>singleton</type>
                        <class>integrationmodule/observer</class>
                        <method>controllerFrontInitBefore</method>
                    </triggmine_lib_load>
                    <send_page_init_observer>
                        <type>singleton</type>
                        <class>integrationmodule/observer</class>
                        <method>send_page_init</method>
                    </send_page_init_observer>
                </observers>
            </controller_front_init_before>
            <application_clean_cache> <!-- identifier of the event we want to catch -->
                <observers>
                    <application_clean_cache_handler> <!-- identifier of the event handler -->
                        <type>model</type>
                        <class>integrationmodule/observer</class>
                        <method>diagnostic_information_updated</method>
                        <args></args>
                    </application_clean_cache_handler>
                </observers>
            </application_clean_cache>
            <checkout_cart_add_product_complete> <!-- identifier of the event we want to catch -->
                <observers>
                    <checkout_cart_add_product_complete_handler> <!-- identifier of the event handler -->
                        <type>model</type><!-- class method call type; valid are model, object and singleton -->
                        <class>integrationmodule/observer</class> <!-- observers class alias -->
                        <method>CheckoutCartSaveAfter</method>  <!-- observer's method to be called -->
                        <args></args> <!-- additional arguments passed to observer -->
                    </checkout_cart_add_product_complete_handler>
                </observers>
            </checkout_cart_add_product_complete>
            <checkout_cart_update_items_after> <!-- identifier of the event we want to catch -->
                <observers>
                    <checkout_cart_update_items_after_handler> <!-- identifier of the event handler -->
                        <type>model</type> <!-- class method call type; valid are model, object and singleton -->
                        <class>integrationmodule/observer</class> <!-- observers class alias -->
                        <method>CheckoutCartSaveAfter</method>  <!-- observer's method to be called -->
                        <args></args> <!-- additional arguments passed to observer -->
                    </checkout_cart_update_items_after_handler>
                </observers>
            </checkout_cart_update_items_after>
            <sales_quote_remove_item> <!-- identifier of the event we want to catch -->
                <observers>
                    <sales_quote_remove_item_handler> <!-- identifier of the event handler -->
                        <type>model</type> <!-- class method call type; valid are model, object and singleton -->
                        <class>integrationmodule/observer</class> <!-- observers class alias -->
                        <method>CheckoutCartSaveAfter</method><!-- observer's method to be called -->
                        <args></args><!-- additional arguments passed to observer -->
                    </sales_quote_remove_item_handler>
                </observers>
            </sales_quote_remove_item>
            <sales_order_place_after> <!-- identifier of the event we want to catch -->
                <observers>
                    <sales_order_place_after_handler> <!-- identifier of the event handler -->
                        <type>model</type> <!-- class method call type; valid are model, object and singleton -->
                        <class>integrationmodule/observer</class> <!-- observers class alias -->
                        <method>SalesOrderPlaceAfter</method>  <!-- observer's method to be called -->
                        <args></args> <!-- additional arguments passed to observer -->
                    </sales_order_place_after_handler>
                </observers>
            </sales_order_place_after>
            <customer_login> <!-- identifier of the event we want to catch -->
                <observers>
                    <customer_login_handler> <!-- identifier of the event handler -->
                        <type>model</type>
                        <!-- class method call type; valid are model, object and singleton -->
                        <class>integrationmodule/observer</class>
                        <!-- observers class alias -->
                        <method>CustomerLogin</method>
                        <!-- observer's method to be called -->
                        <args></args>
                        <!-- additional arguments passed to observer -->
                    </customer_login_handler>
                </observers>
            </customer_login>
            <customer_register_success> <!-- identifier of the event we want to catch -->
                <observers>
                    <customer_register_success_handler> <!-- identifier of the event handler -->
                        <type>model</type>
                        <!-- class method call type; valid are model, object and singleton -->
                        <class>integrationmodule/observer</class>
                        <!-- observers class alias -->
                        <method>CustomerRegisterSuccess</method>
                        <!-- observer's method to be called -->
                        <args></args>
                        <!-- additional arguments passed to observer -->
                    </customer_register_success_handler>
                </observers>
            </customer_register_success>
            <customer_logout> <!-- identifier of the event we want to catch -->
                <observers>
                    <customer_logout_handler> <!-- identifier of the event handler -->
                        <type>model</type>
                        <!-- class method call type; valid are model, object and singleton -->
                        <class>integrationmodule/observer</class>
                        <!-- observers class alias -->
                        <method>CustomerLogout</method>
                        <!-- observer's method to be called -->
                        <args></args>
                        <!-- additional arguments passed to observer -->
                    </customer_logout_handler>
                </observers>
            </customer_logout>
            <!--<sales_quote_remove_item> &lt;!&ndash; identifier of the event we want to catch &ndash;&gt;
                <observers>
                    <sales_quote_remove_item_handler> &lt;!&ndash; identifier of the event handler &ndash;&gt;
                        <type>model</type> &lt;!&ndash; class method call type; valid are model, object and singleton &ndash;&gt;
                        <class>integrationmodule/observer</class> &lt;!&ndash; observers class alias &ndash;&gt;
                        <method>onCartItemDeleted</method>  &lt;!&ndash; observer's method to be called &ndash;&gt;
                        <args></args> &lt;!&ndash; additional arguments passed to observer &ndash;&gt;
                    </sales_quote_remove_item_handler>
                </observers>
            </sales_quote_remove_item>
            <checkout_cart_update_items_before_handler> &lt;!&ndash; identifier of the event we want to catch &ndash;&gt;
                <observers>
                    <checkout_cart_update_items_before_handler_handler> &lt;!&ndash; identifier of the event handler &ndash;&gt;
                        <type>model</type> &lt;!&ndash; class method call type; valid are model, object and singleton &ndash;&gt;
                        <class>integrationmodule/observer</class> &lt;!&ndash; observers class alias &ndash;&gt;
                        <method>onCardUpdated</method>  &lt;!&ndash; observer's method to be called &ndash;&gt;
                        <args></args> &lt;!&ndash; additional arguments passed to observer &ndash;&gt;
                    </checkout_cart_update_items_before_handler_handler>
                </observers>
            </checkout_cart_update_items_before_handler>-->
        </events>
    </global>
    <frontend>
        <layout>
            <updates>
                <triggmine_integrationmodule>
                    <file>triggmine_integrationmodule.xml</file>
                </triggmine_integrationmodule>
            </updates>
        </layout>
    </frontend>
    <admin>
        <routers>
            <integrationmodule>
                <use>admin</use>
                <args>
                    <module>Triggmine_IntegrationModule</module>
                    <frontName>admin_integrationmodule</frontName>
                </args>
            </integrationmodule>
        </routers>
    </admin>
    <adminhtml>
        <acl>
            <resources>
                <all>
                    <title>Allow Everything</title>
                </all>
                <admin>
                    <children>
                        <integrationmodule translate="title" module="integrationmodule">
                            <title>IntegrationModule</title>
                            <sort_order>1000</sort_order>
                            <children>
                                <integrationmodulebackend translate="title">
                                    <title>Triggmine Settings</title>
                                </integrationmodulebackend>
                            </children>
                        </integrationmodule>
                    </children>
                </admin>
            </resources>
        </acl>
        <layout>
            <updates>
                <integrationmodule>
                    <file>integrationmodule.xml</file>
                </integrationmodule>
            </updates>
        </layout>
    </adminhtml>
</config>